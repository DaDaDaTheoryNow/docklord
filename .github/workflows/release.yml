name: Release

permissions:
  contents: write

on:
  push:
    tags:
      - "v*" # Trigger on version tags (e.g., v1.0.0)

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: full
  CARGO_NET_RETRY: 10
  RUSTFLAGS: -D warnings
  RUSTUP_MAX_RETRIES: 10
  # AArch64 specific
  CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
  # Windows specific
  CARGO_TARGET_X86_64_PC_WINDOWS_GNU_LINKER: x86_64-w64-mingw32-gcc

jobs:
  build:
    name: Build Release
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact: docklord-linux-x86_64
            release_os: linux
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact: docklord-linux-aarch64
            release_os: linux
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact: docklord-macos-x86_64
            release_os: macos
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact: docklord-macos-aarch64
            release_os: macos
          - os: windows-latest
            target: x86_64-pc-windows-gnu
            artifact: docklord-windows-x86_64.exe
            release_os: windows

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true
          profile: minimal
          components: rustfmt, clippy

      - name: Setup Unix systems
        if: runner.os != 'Windows'
        run: |
          if [ "${{ runner.os }}" = "Linux" ]; then
            sudo apt-get update
            sudo apt-get install -y protobuf-compiler libprotobuf-dev
            if [ "${{ matrix.target }}" = "aarch64-unknown-linux-gnu" ]; then
              sudo apt-get install -y gcc-aarch64-linux-gnu libc6-dev-arm64-cross
            else
              sudo apt-get install -y gcc-x86-64-linux-gnu
            fi
            echo "PROTOC=/usr/bin/protoc" >> $GITHUB_ENV
          elif [ "${{ runner.os }}" = "macOS" ]; then
            brew install protobuf
            echo "PROTOC=$(which protoc)" >> $GITHUB_ENV
          fi

      - name: Setup Windows
        if: runner.os == 'Windows'
        run: |
          choco install protoc -y
          choco install mingw --params "/threads:win32" -y
          $protocPath = "C:\ProgramData\chocolatey\lib\protoc\tools\bin"
          $env:PROTOC = Join-Path $protocPath "protoc.exe"
          $env:PATH = "$protocPath;$env:PATH"
          $env:CARGO_TARGET_X86_64_PC_WINDOWS_GNU_LINKER = "x86_64-w64-mingw32-gcc"
          Write-Host "PROTOC path: $env:PROTOC"

      - name: Verify installations (Unix)
        if: runner.os != 'Windows'
        run: |
          echo "Protoc version: $(protoc --version || echo 'Not available')"
          echo "Rust version: $(rustc --version)"
          echo "Cargo version: $(cargo --version)"
          if [ "${{ runner.os }}" = "Linux" ]; then
            echo "GCC version: $(gcc --version)"
            if [ "${{ matrix.target }}" = "aarch64-unknown-linux-gnu" ]; then
              echo "AArch64 GCC: $(aarch64-linux-gnu-gcc --version)"
            fi
          fi

      - name: Verify installations (Windows)
        if: runner.os == 'Windows'
        run: |
          $protocDir = "C:\ProgramData\chocolatey\lib\protoc\tools\bin"
          $env:PATH = "$protocDir;$env:PATH"
          Write-Host "Protoc version:"
          protoc --version
          rustc --version
          cargo --version
          try { x86_64-w64-mingw32-gcc --version } catch { Write-Host "Mingw not found" }

      - name: Build release
        run: cargo build --release --target ${{ matrix.target }}

      - name: Post-build Unix
        if: runner.os != 'Windows'
        run: |
          if [ "${{ matrix.target }}" = "aarch64-unknown-linux-gnu" ]; then
            aarch64-linux-gnu-strip target/${{ matrix.target }}/release/docklord-runner
          else
            strip target/${{ matrix.target }}/release/docklord-runner
          fi
          mv target/${{ matrix.target }}/release/docklord-runner target/${{ matrix.target }}/release/${{ matrix.artifact }}

      - name: Post-build Windows
        if: runner.os == 'Windows'
        run: |
          mv target/${{ matrix.target }}/release/docklord-runner.exe target/${{ matrix.target }}/release/${{ matrix.artifact }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact }}
          path: target/${{ matrix.target }}/release/${{ matrix.artifact }}
          if-no-files-found: error

  release:
    name: Upload Release Assets
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Flatten artifacts into single folder
        run: |
          mkdir -p artifacts_flat
          find artifacts -type f -exec cp {} artifacts_flat/ \;

      - name: Upload Release Assets
        uses: AButler/upload-release-assets@v2.0
        with:
          files: "artifacts_flat/*"
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          release-tag: ${{ github.ref_name }}
